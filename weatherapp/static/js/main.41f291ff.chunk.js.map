{"version":3,"sources":["components/search/Search.js","pages/weatherNow/WeatherNow.js","pages/forecast/SingleForecast.js","pages/forecast/Forecast.js","components/loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","city","cities","handleInputChange","event","val","target","value","setState","length","fetchCities","searchInput","Axios","get","keys","search","then","res","console","log","data","suggestions","filter","suggestion","matchLevel","displayCitySuggestions","options","map","index","key","onClick","address","handleSearch","country","className","props","handleSearchData","document","querySelector","placeholder","onChange","this","Component","WeatherNow","displayWeatherIcon","main","WeatherIcon","temp","desc","feelsLike","humidity","wind","SingleForecast","convertDate","date","Date","toDateString","slice","DisplayIcon","forecast","dt","weather","description","speed","Forecast","forecastList","isLoading","fiveDayForecast","list","Loader","css","color","App","iconUrl","fetchWeatherData","icon","feels_like","onSearch","activeClassName","exact","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41f291ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Axios from 'axios';\r\nimport keys from './../../config.json';\r\n\r\nexport default class Search extends Component {\r\n\r\n    state = {\r\n        city : \"\",\r\n        cities : []\r\n    }\r\n   handleInputChange = (event) => {\r\n       let val = event.target.value\r\n       this.setState({city:val})\r\n       if(val.length >= 1){\r\n           this.fetchCities(val)\r\n        } \r\n   }\r\n    fetchCities = (searchInput) => {\r\n        // console.log(searchInput)\r\n        Axios.get(`https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json?apiKey=${keys.search}&query=${searchInput}`)\r\n        .then(res => {\r\n            console.log(res.data.suggestions)\r\n            let suggestions = res.data.suggestions.filter(suggestion => {\r\n                if(suggestion.matchLevel === \"city\"){\r\n                    return suggestion\r\n                }\r\n            })\r\n            this.setState({cities:suggestions})\r\n            \r\n        })           \r\n    }\r\n    \r\n    displayCitySuggestions = () => {\r\n        const options = this.state.cities.map( (city,index) => {\r\n            return( \r\n                <p key={city+index} onClick={ () => {this.setState({city:city.address.city, cities:[]}, () => this.handleSearch())}}>\r\n                        {city.address.city}, {city.address.country}\r\n                </p>\r\n                )              \r\n            })\r\n            return <ul className=\"citySuggestions\">{options}</ul>\r\n    }\r\n\r\n    handleSearch = () => {\r\n        this.setState({cities:[]})\r\n        this.props.handleSearchData(this.state.city)\r\n        document.querySelector(\"input\").value=\"\"\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"searchContainer\">\r\n                <input placeholder=\"Search by City\" onChange={(event) => this.handleInputChange(event)}/>\r\n                <button onClick={() => this.handleSearch()}>Search</button>\r\n                {this.displayCitySuggestions()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { WiStrongWind as Wind} from 'react-icons/wi';\r\nimport { WiHumidity as Humidity} from 'react-icons/wi';\r\nimport {WiCloudy as Clouds } from 'react-icons/wi';\r\nimport {WiDaySunny as Sun } from 'react-icons/wi';\r\nimport {WiRain as Rain } from 'react-icons/wi';\r\nimport {WiSnow as Snow } from 'react-icons/wi';\r\nimport {WiThunderstorm as Thunderstorm } from 'react-icons/wi';\r\nimport {WiShowers as Drizzle } from 'react-icons/wi';\r\nimport {WiFog as Other } from 'react-icons/wi';\r\nimport {WiThermometer as Thermometer } from 'react-icons/wi';\r\n\r\nexport default class WeatherNow extends Component{\r\n    displayWeatherIcon = (main) => {\r\n        let WeatherIcon;\r\n        switch(main) {\r\n          case 'Clouds':\r\n            WeatherIcon = <Clouds className=\"mainIcon\"/>\r\n            break;\r\n          case 'Clear':\r\n            WeatherIcon = <Sun className=\"mainIcon\"/>\r\n            break;\r\n          case 'Rain':\r\n            WeatherIcon= <Rain className=\"mainIcon\"/>\r\n            break;\r\n          case 'Snow':\r\n            WeatherIcon = <Snow className=\"mainIcon\"/>\r\n            break;\r\n          case 'Drizzle':\r\n            WeatherIcon = <Drizzle className=\"mainIcon\"/>\r\n            break;\r\n          case 'Thunderstorm':\r\n            WeatherIcon = <Thunderstorm className=\"mainIcon\"/>\r\n            break;\r\n          default:\r\n            WeatherIcon = <Other className=\"mainIcon\"/>\r\n          }\r\n          return WeatherIcon;\r\n      }\r\n    render () {\r\n        const { temp, desc, city, main, feelsLike, humidity, wind } = this.props\r\n        // console.log(main)\r\n        return(\r\n            <div className=\"currentWeather\">\r\n                <h1>{city}</h1>\r\n                {this.displayWeatherIcon(main)}\r\n                <div className=\"currentMainText\">\r\n                <h2 className=\"temp\">{temp} °C</h2>\r\n                <p>{desc}</p>\r\n            </div>\r\n            <div className=\"currentWeatherItems\">\r\n              <div>\r\n                <Thermometer className=\"currIcon\"/>\r\n                <p> Feels like</p>\r\n                <h3 className=\"temp\">{feelsLike} °C</h3>\r\n              </div>\r\n              <div>\r\n                <Wind className=\"currIcon\"/>\r\n                <p>Wind</p>\r\n                <h3>{wind} m/s</h3>\r\n              </div>\r\n              <div>\r\n                <Humidity className=\"currIcon\"/>\r\n                <p>Humidity</p>\r\n                <h3>{humidity}</h3>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {WiCloudy as Clouds } from 'react-icons/wi';\r\nimport {WiDaySunny as Sun } from 'react-icons/wi';\r\nimport {WiRain as Rain } from 'react-icons/wi';\r\nimport {WiSnow as Snow } from 'react-icons/wi';\r\nimport {WiThunderstorm as Thunderstorm } from 'react-icons/wi';\r\nimport {WiShowers as Drizzle } from 'react-icons/wi';\r\nimport {WiFog as Other } from 'react-icons/wi';\r\nimport {WiThermometer as Thermometer } from 'react-icons/wi';\r\nimport { WiStrongWind as Wind} from 'react-icons/wi';\r\n\r\nexport default class SingleForecast extends Component {\r\n    convertDate= (date) => {\r\n        let unixDate = date;        \r\n        let dateObj = new Date(unixDate * 1000);\r\n        let dateStr = dateObj.toDateString();\r\n        let weekday = dateStr.slice(0,3);\r\n        return weekday;\r\n    }\r\n    DisplayIcon = (main) => {\r\n        let WeatherIcon;\r\n        switch(main){\r\n          case 'Clouds':\r\n            WeatherIcon = <Clouds className=\"icon\"/>\r\n            break;\r\n          case 'Clear':\r\n            WeatherIcon = <Sun className=\"icon\"/>\r\n            break;\r\n          case 'Rain':\r\n            WeatherIcon= <Rain className=\"icon\"/>\r\n            break;\r\n          case 'Snow':\r\n            WeatherIcon = <Snow className=\"icon\"/>\r\n            break;\r\n          case 'Drizzle':\r\n            WeatherIcon = <Drizzle className=\"icon\"/>\r\n            break;\r\n          case 'Thunderstorm':\r\n            WeatherIcon = <Thunderstorm className=\"icon\"/>\r\n            break;\r\n          default:\r\n            WeatherIcon = <Other className=\"icon\"/>\r\n          }\r\n          return WeatherIcon;\r\n      }\r\n    render() {\r\n        const { forecast } = this.props;\r\n        return(\r\n            <div className=\"forecast\">\r\n                <h2 >{this.convertDate(forecast.dt)}</h2>\r\n                <p> {forecast.weather[0].description}</p>\r\n                {this.DisplayIcon(forecast.weather[0].main)}\r\n                <div><Thermometer className=\"smallIcon\"/><h3>{forecast.main.temp} °C</h3></div>\r\n                <div> <Wind className=\"smallIcon\"/><p>{forecast.wind.speed} m/s</p></div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Axios from 'axios';\r\nimport keys from './../../config.json';\r\nimport SingleForecast from \"./SingleForecast\";\r\nimport {WiCloudy as Clouds } from 'react-icons/wi';\r\nimport {WiDaySunny as Sun } from 'react-icons/wi';\r\nimport {WiRain as Rain } from 'react-icons/wi';\r\nimport {WiSnow as Snow } from 'react-icons/wi';\r\nimport {WiThunderstorm as Thunderstorm } from 'react-icons/wi';\r\nimport {WiShowers as Drizzle } from 'react-icons/wi';\r\nimport {WiFog as Other } from 'react-icons/wi';\r\n\r\nexport default class Forecast extends Component{\r\n  state = {\r\n    forecastList : [],\r\n    isLoading : true\r\n  }\r\n\r\n   async componentDidMount () {\r\n    const res = await Axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${this.props.city}&APPID=${keys.weather}&units=metric`)\r\n    const fiveDayForecast = res.data.list.filter((forecast, index) => {\r\n      if(index % 8===0){\r\n        return forecast\r\n      }\r\n    })\r\n    this.setState({forecastList:fiveDayForecast, isLoading:false})\r\n    }\r\n\r\n    displayWeatherIcon = (main) => {\r\n      let WeatherIcon;\r\n      switch(main){\r\n        case 'Clouds':\r\n          WeatherIcon = <Clouds className=\"icon\"/>\r\n          break;\r\n        case 'Clear':\r\n          WeatherIcon = <Sun className=\"icon\"/>\r\n          break;\r\n        case 'Rain':\r\n          WeatherIcon= <Rain className=\"icon\"/>\r\n          break;\r\n        case 'Snow':\r\n          WeatherIcon = <Snow className=\"icon\"/>\r\n          break;\r\n        case 'Drizzle':\r\n          WeatherIcon = <Drizzle className=\"icon\"/>\r\n          break;\r\n        case 'Thunderstorm':\r\n          WeatherIcon = <Thunderstorm className=\"icon\"/>\r\n          break;\r\n        default:\r\n          WeatherIcon = <Other className=\"icon\"/>\r\n        }\r\n        return WeatherIcon;\r\n    }\r\n   \r\n  convertDate= (date) => {\r\n    let unixDate = date;        \r\n    let dateObj = new Date(unixDate * 1000);\r\n    let dateStr = dateObj.toDateString();\r\n    let weekday = dateStr.slice(0,3);\r\n    return weekday;\r\n}\r\n    render() {\r\n        const { city } = this.props\r\n        const {forecastList } = this.state\r\n        return(\r\n            <div className=\"fiveDayForecast\">\r\n                <h1>{city}</h1>\r\n                <h2>5 day forecast</h2>\r\n                <div className=\"forecastList\">\r\n                  {forecastList.map( (forecast, index) => {  \r\n                  return  <SingleForecast key={\"forecast\"+ index}  forecast={forecast} />})}\r\n                 </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { SyncLoader } from 'react-spinners';\r\n \r\nconst override =`\r\n  position:absolute;\r\n  top:50%;\r\n  left:50%;\r\n  margin: auto;\r\n`;\r\n\r\nexport default class Loader extends Component{\r\n    render() {\r\n        return(\r\n            <div className=\"loader\">\r\n            <SyncLoader css={override} color={\"#312BB7\"}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport keys from './config.json';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, NavLink } from 'react-router-dom';\nimport Search from './components/search/Search';\nimport WeatherNow from './pages/weatherNow/WeatherNow';\nimport Forecast from './pages/forecast/Forecast';\nimport Loader from './components/loader/Loader';\n\nclass App extends Component{\n  state = {\n    city : \"Copenhagen\",\n    temp : \"\",\n    desc: \"\",\n    main: \"\",\n    humidity:\"\",\n    wind: \"\",\n    iconUrl: \"\",\n    feelsLike:\"\",\n    isLoading:true\n  }\n \n  async componentDidMount () {\n    this.fetchWeatherData(this.state.city)\n  }\n \n fetchWeatherData = (city) => {\n    Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${keys.weather}&units=metric`)\n    .then(res => {\n      console.log('weather', res.data)\n      let iconUrl = \"https://openweathermap.org/img/wn/\" + res.data.weather[0].icon + \"@2x.png\";\n\n      this.setState({\n        desc:res.data.weather[0].description,\n        temp:res.data.main.temp,\n        main:res.data.weather[0].main,\n        humidity:res.data.main.humidity,\n        wind:res.data.wind.speed,\n        iconUrl : iconUrl,\n        feelsLike: res.data.main.feels_like,\n        isLoading:false\n      })\n    })\n  }\n\nonSearch = (city) => {\n    this.setState({city})\n    this.fetchWeatherData(city)\n  }\n\nisLoading = () =>{\n  if(this.state.isLoading){\n    return <Loader/>\n  }\n}\n\n  render () {\n    const { temp, desc, city, iconUrl, main, wind, humidity, feelsLike } = this.state;\n    return (\n      <Router>\n      {this.isLoading()}\n      <div className=\"app\">\n        <nav>\n            <ul>\n              <li>\n                <NavLink activeClassName=\"selected\" exact to=\"/weatherapp\">Today</NavLink>\n              </li>\n              <li>\n                <NavLink activeClassName=\"selected\" to=\"/weatherapp/forecast\">5 Day Forecast</NavLink>\n              </li>\n              <Search handleSearchData={this.onSearch}/> \n            </ul>\n          </nav>\n        <Switch>\n          <Route exact path=\"/weatherapp\"\n            component={(props)=>\n              <WeatherNow  {...props} iconUrl={iconUrl} wind={wind} main={main} feelsLike={feelsLike} city={city} temp={temp} humidity={humidity} desc={desc} />\n            }/>\n         <Route path=\"/weatherapp/forecast\"\n         component={ (props) => \n            <Forecast {...props} city={city} />\n           }/>\n        </Switch>\n                \n      </div>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}